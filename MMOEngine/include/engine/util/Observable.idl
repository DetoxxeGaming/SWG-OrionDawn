/*
Copyright (C) 2007 <SWGEmu>. All rights reserved.
Distribution of this file for usage outside of Core3 is prohibited.
*/
package engine.util;

include engine.core.ManagedObject;

//import engine.core.ManagedReference;
import engine.log.Logger;

include engine.util.Observer;
include engine.util.ObserverEventMap;
include system.util.SortedVector;

class Observable extends ManagedObject {
	@dereferenced
	protected ObserverEventMap observerEventMap;
	
	@dereferenced
	protected SortedVector<Observable> observableChildren;
	
	public Observable() {
		observableChildren.setNoDuplicateInsertPlan();
	}
	
	public void notifyObservers(unsigned int eventType, ManagedObject arg1 = null, long arg2 = 0) {
		observerEventMap.notifyObservers(eventType, this, arg1, arg2);
		
		for (int i = 0; i < observableChildren.size(); ++i) {
			observableChildren.get(i).notifyObservers(eventType, arg1, arg2);
		}
	}
	
	public void registerObserver(unsigned int eventType, Observer observer) {
		observerEventMap.registerObserver(eventType, observer);
	}
	
	public void dropObserver(unsigned int eventType, Observer observer) {
		observerEventMap.dropObserver(eventType, observer);
	}
	
	@read
	public int getObserverCount(unsigned int eventType) {
		return observerEventMap.getObserverCount(eventType);
	}
	
	public void addObservableChild(Observable observable) {
		observableChildren.put(observable);
	}
	
	public void dropObserveableChild(Observable observable) {
		observableChildren.drop(observable);
	}
		
}
